/*
 * This file is generated by jOOQ.
 */
package de.tichawa.cis.config.model.tables;


import de.tichawa.cis.config.model.*;
import de.tichawa.cis.config.model.tables.records.EquipmentRecord;
import org.jooq.*;
import org.jooq.impl.*;

import java.util.*;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Equipment extends TableImpl<EquipmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>equipment</code>
     */
    public static final Equipment EQUIPMENT = new Equipment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EquipmentRecord> getRecordType() {
        return EquipmentRecord.class;
    }

    /**
     * The column <code>equipment.art_no</code>.
     */
    public final TableField<EquipmentRecord, Integer> ART_NO = createField(DSL.name("art_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>equipment.select_code</code>.
     */
    public final TableField<EquipmentRecord, String> SELECT_CODE = createField(DSL.name("select_code"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>equipment.amount</code>.
     */
    public final TableField<EquipmentRecord, String> AMOUNT = createField(DSL.name("amount"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Equipment(Name alias, Table<EquipmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Equipment(Name alias, Table<EquipmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(String alias) {
        this(DSL.name(alias), EQUIPMENT);
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(Name alias) {
        this(alias, EQUIPMENT);
    }

    /**
     * Create a <code>equipment</code> table reference
     */
    public Equipment() {
        this(DSL.name("equipment"), null);
    }

    public <O extends Record> Equipment(Table<O> child, ForeignKey<O, EquipmentRecord> key) {
        super(child, key, EQUIPMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<ForeignKey<EquipmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EquipmentRecord, ?>>asList(Keys.FK_EQUIPMENT_PRICE_1);
    }

    private transient Price _price;

    public Price price() {
        if (_price == null)
            _price = new Price(this, Keys.FK_EQUIPMENT_PRICE_1);

        return _price;
    }

    @Override
    public Equipment as(String alias) {
        return new Equipment(DSL.name(alias), this);
    }

    @Override
    public Equipment as(Name alias) {
        return new Equipment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(String name) {
        return new Equipment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(Name name) {
        return new Equipment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}