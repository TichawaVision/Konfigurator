/*
 * This file is generated by jOOQ.
 */
package de.tichawa.cis.config.model.tables;


import de.tichawa.cis.config.model.DefaultSchema;
import de.tichawa.cis.config.model.Keys;
import de.tichawa.cis.config.model.tables.records.EquipmentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Equipment extends TableImpl<EquipmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>equipment</code>
     */
    public static final Equipment EQUIPMENT = new Equipment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EquipmentRecord> getRecordType() {
        return EquipmentRecord.class;
    }

    /**
     * The column <code>equipment.art_no_ferix_old</code>.
     */
    public final TableField<EquipmentRecord, Integer> ART_NO_FERIX_OLD = createField(DSL.name("art_no_ferix_old"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>equipment.art_no_ferix_new</code>.
     */
    public final TableField<EquipmentRecord, Integer> ART_NO_FERIX_NEW = createField(DSL.name("art_no_ferix_new"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>equipment.description</code>.
     */
    public final TableField<EquipmentRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>equipment.select_code</code>.
     */
    public final TableField<EquipmentRecord, String> SELECT_CODE = createField(DSL.name("select_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>equipment.amount</code>.
     */
    public final TableField<EquipmentRecord, String> AMOUNT = createField(DSL.name("amount"), SQLDataType.CLOB.nullable(false), this, "");

    private Equipment(Name alias, Table<EquipmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Equipment(Name alias, Table<EquipmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(String alias) {
        this(DSL.name(alias), EQUIPMENT);
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(Name alias) {
        this(alias, EQUIPMENT);
    }

    /**
     * Create a <code>equipment</code> table reference
     */
    public Equipment() {
        this(DSL.name("equipment"), null);
    }

    public <O extends Record> Equipment(Table<O> child, ForeignKey<O, EquipmentRecord> key) {
        super(child, key, EQUIPMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EquipmentRecord> getPrimaryKey() {
        return Keys.PK_EQUIPMENT;
    }

    @Override
    public List<UniqueKey<EquipmentRecord>> getKeys() {
        return Arrays.<UniqueKey<EquipmentRecord>>asList(Keys.PK_EQUIPMENT);
    }

    @Override
    public Equipment as(String alias) {
        return new Equipment(DSL.name(alias), this);
    }

    @Override
    public Equipment as(Name alias) {
        return new Equipment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(String name) {
        return new Equipment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(Name name) {
        return new Equipment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
